import gmsh
import feapack.gmsh
import feapack.model
import feapack.solver

#-----------------------------------------------------------
# CREATING THE MESH WITH GMSH
#-----------------------------------------------------------

# initialize Gmsh
gmsh.initialize()

# points
p1 = gmsh.model.geo.addPoint(  0.0,  0.0, 0.0)
p2 = gmsh.model.geo.addPoint( 20.0,  0.0, 0.0)
p3 = gmsh.model.geo.addPoint(  0.0, 20.0, 0.0)
p4 = gmsh.model.geo.addPoint(  0.0, 50.0, 0.0)
p5 = gmsh.model.geo.addPoint(100.0, 50.0, 0.0)
p6 = gmsh.model.geo.addPoint(100.0,  0.0, 0.0)

# curves
c1 = gmsh.model.geo.addCircleArc(p2, p1, p3)
c2 = gmsh.model.geo.addLine(p3, p4)
c3 = gmsh.model.geo.addLine(p4, p5)
c4 = gmsh.model.geo.addLine(p5, p6)
c5 = gmsh.model.geo.addLine(p6, p2)

# surfaces
l1 = gmsh.model.geo.addCurveLoop([c1, c2, c3, c4, c5])
s1 = gmsh.model.geo.addPlaneSurface([l1])

# geometry done
gmsh.model.geo.synchronize()

# create Gmsh physical groups that will become FEAPACK sets
# by default, Gmsh only saves elements associated with a physical group
# hence, a physical group specifying the domain is generally required
gmsh.model.addPhysicalGroup(2, [s1], name='PG-DOMAIN') # contains the whole domain (a 2D surface)
gmsh.model.addPhysicalGroup(1, [c2], name='PG-X-SYM')  # contains the edge for the x-symmetry boundary condition (a 1D curve)
gmsh.model.addPhysicalGroup(1, [c5], name='PG-Y-SYM')  # contains the edge for the y-symmetry boundary condition (a 1D curve)
gmsh.model.addPhysicalGroup(1, [c4], name='PG-LOAD')   # contains the edge for the load application (a 1D curve)

# generate 2D mesh
refinementLevel = 2
gmsh.model.mesh.generate(2)
for _ in range(refinementLevel):
    gmsh.model.mesh.refine()

# if you want to view the mesh now, uncomment the following line
# gmsh.fltk.run()

# write mesh to file
gmsh.option.setNumber('Mesh.SaveAll', False)          # default (also works with True, but more unused elements are saved)
gmsh.option.setNumber('Mesh.SaveGroupsOfNodes', True) # to save node sets
gmsh.write('advanced1.inp')

# finalize Gmsh
gmsh.finalize()

#-----------------------------------------------------------
# FINITE ELEMENT ANALYSIS WITH FEAPACK
#-----------------------------------------------------------

# create model database (MDB)
feapack.gmsh.clean('advanced1.inp') # required if inp file is generated by Gmsh
mdb = feapack.model.MDB.fromFile('advanced1.inp')

# print available sets
print('Node sets:', *mdb.nodeSets.keys())       # Node sets: PG-X-SYM PG-Y-SYM PG-LOAD PG-DOMAIN
print('Element sets:', *mdb.elementSets.keys()) # Element sets: PG-DOMAIN

# create surface set
mdb.surfaceSet(name='LOAD-SURFACE', surfaceNodes='PG-LOAD')

# create material and section
mdb.material(name='AL', young=70000.0, poisson=0.3)
mdb.section(
    name='AL-SECTION',
    region='PG-DOMAIN',
    material='AL',
    type=feapack.model.SectionTypes.PlaneStress, # or simply 'PlaneStress'
    thickness=10.0,
    reducedIntegration=False
)

# create load
mdb.surfaceTraction(name='TENSION', region='LOAD-SURFACE', x=250.0)

# boundary conditions
mdb.boundaryCondition(name='X-SYM', region='PG-X-SYM', u=0.0)
mdb.boundaryCondition(name='Y-SYM', region='PG-Y-SYM', v=0.0)

# call solver
feapack.solver.solve(mdb, analysis='static')
